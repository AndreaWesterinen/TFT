#!/usr/bin/php
<?php
ini_set('memory_limit', '2000M');
/*

* TEST SCRIPT:

cd /home/rafes/projects/gridobs3/tools/testsparql11

//virtuoso
./tft -i -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt virtuoso -te http://dev.grid-observatory.org:8890/tests/ \
-o ./junit \
-r http://dev.grid-observatory.org/testsVirtuoso

./tft -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt virtuoso -tq http://onevm-194.lal.in2p3.fr:8095/sparql/ -tu http://onevm-194.lal.in2p3.fr:8095/sparql/ \
-o ./junit -r http://dev.grid-observatory.org/testsVirtuoso10  \
--softwareName=virtuoso --softwareDescribeTag=v0.2  --softwareDescribe=v0.2-truc

curl -v -H "Accept: application/sparql-results+xml" \
--data-urlencode \
'query=SELECT (COUNT(?s) AS ?count) WHERE {GRAPH ?g {  ?s ?p ?v .}}' \
http://dev.grid-observatory.org:8890/sparql/

//4Store
./tft -i -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt 4store -te http://dev.grid-observatory.org:8000/ \
-o ./junit \
-r http://dev.grid-observatory.org/tests

//sesame
./tft -i -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
 -tt sesame -tq http://dev.grid-observatory.org:8080/openrdf-sesame/repositories/sparql \
 -tu http://dev.grid-observatory.org:8080/openrdf-sesame/repositories/sparql/statements \
-o ./junit \
-r http://dev.grid-observatory.org/tests

//fuseki
./tft -i -t 4store -e http://dev.grid-observatory.org:8000/ \
-tt fuseki -tq http://dev.grid-observatory.org:3030/tests/query \
-tu http://dev.grid-observatory.org:3030/tests/update \
-o ./junit \
-r http://dev.grid-observatory.org/tests

// Allegrograph :
./tft -i -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt allegrograph -tq http://dev.grid-observatory.org:10035/repositories/tests -tu http://dev.grid-observatory.org:10035/repositories/tests \
--testnameParameterUpdate=query \
-o ./junit \
-r http://dev.grid-observatory.org/tests

./tft -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt allegrograph -tq http://dev.grid-observatory.org:10035/repositories/tests \
-tu http://dev.grid-observatory.org:10035/repositories/tests --testnameParameterUpdate=query \
-o ./junit -r http://dev.grid-observatory.org/testsVirtuoso10  --softwareName=virtuoso \
--softwareDescribeTag=v0.2  --softwareDescribe=v0.2-truc




./tft -t fuseki -q http://dev.grid-observatory.org:3030/tests/query -u http://dev.grid-observatory.org:3030/tests/update \
-tt allegrograph -tq http://dev.grid-observatory.org:10035/repositories/tests -tu http://dev.grid-observatory.org:10035/repositories/tests \
--testnameParameterUpdate=query \
-o ./junit -r http://dev.grid-observatory.org/testsVirtuoso10  \
--softwareName=virtuoso --softwareDescribeTag=v0.2  --softwareDescribe=v0.2-truc

*/
require_once __DIR__ . '/vendor/autoload.php';

use BorderCloud\SPARQL\Curl;
use BorderCloud\SPARQL\SparqlClient;

//require_once 'lib/sparql/Endpoint.php';

require_once 'AbstractTest.php';
require_once 'Tools.php';
require_once 'TestSuite.php';
require_once 'TestsReport.php';
require_once 'Test.php';
require_once 'sesame/SesameTestSuite.php';
require_once 'fuseki/FusekiTestSuite.php';
require_once '4store/4storeTestSuite.php';
require_once 'QueryEvaluationTest.php';
require_once 'PositiveSyntaxTest.php';
require_once 'NegativeSyntaxTest.php';
require_once 'PositiveUpdateSyntaxTest.php';
require_once 'NegativeUpdateSyntaxTest.php';
require_once 'UpdateEvaluationTest.php';
require_once 'CSVResultFormatTest.php';
require_once 'ServiceDescriptionTest.php';

require_once 'TestJmeter.php';
require_once 'ProtocolTest.php';
//require_once 'Test.php';

// Parse with sections
$CONFIG = parse_ini_file("config.ini", true);
//print_r($CONFIG);
//exit();

//List of servers available that you can test with this script
$listTriplestore =  $CONFIG["CONFIG"]["listTriplestore"];

//List of test suite available that you can pass
$listTestSuite =  $CONFIG["CONFIG"]["listTestSuite"];

$usage = "
USAGE : tft [-l|--list] [-t|--triplestore=NAME]
        [
         [-e|--endpointQueryAndUpdate=URL]|
         [-q|--endpointQueryOnly=URL] [-u|--endpointUpdateOnly=URL]
         [-l|--login=LOGIN] [-p|--password=PASSWORD]
        ]
        [
         [-te|--testendpointQueryAndUpdate=URL]|
         [-tq|--testendpointQueryOnly=URL] [-tu|--testendpointUpdateOnly=URL]
        ]
        [-v|-verbose]
        
    --list                          List of servers available that you 
                                        can test with this script.
    -t, --triplestore=NAME              Example: --triplestore=standard or 
                                                 --triplestore=4store
                                            (by default : standard)
    -o, --output                        Save results junit.xml in this folder.
    -r, --recordResult=GRAPH            Save results EARL in the endpoint.
    --softwareName=NAME                      Save name in the results EARL.
    --softwareDescribeTag=TAG           Save last tag in the results EARL.
    --softwareDescribe=DESCRIBE         Save git describe in the results EARL.
	
    -e, --endpointQueryAndUpdate=URL    Put url of endpoint to do query or 
                                        update :
                                            URL/sparql/?query=...
                                            URL/update/?update=... (POST)
    -q, --endpointQueryOnly=URL         Put url of endpoint to do query :
                                            URL?query=...
    -u, --endpointUpdateOnly=URL        Put url of endpoint to do query :
                                            URL?update=... (POST)
                                            
    --nameParameterQuery=PARAMETER      Change the name of parameter in 
                                        the request http to read.
                                        (by default : query)
    --nameParameterUpdate=PARAMETER     Change the name of parameter in 
                                        the request http to write.
                                        (by default : update)
     -l, --login=LOGIN                  Server login
     -p, --password=PASSWORD            Server password
    
    -tt, --testtriplestore=NAME         Example: --triplestore=standard or 
                                                 --triplestore=4store
                                            (by default : standard)
    -te, --testendpointQueryAndUpdate=URL    Put url of endpoint to do query or 
                                        update :
                                            URL/sparql/?query=...
                                            URL/update/?update=... (POST)
    -tq, --testendpointQueryOnly=URL         Put url of endpoint to do query :
                                            URL?query=...
    -tu, --testendpointUpdateOnly=URL        Put url of endpoint to do query :
                                            URL?update=... (POST)
    --testnameParameterQuery=PARAMETER      Change the name of parameter in 
                                        the request http to read.
                                        (by default : query)
    --testnameParameterUpdate=PARAMETER     Change the name of parameter in 
                                        the request http to write.
                                        (by default : update)
     -tl, --testlogin=LOGIN             Test server login
     -tp, --testpassword=PASSWORD       Test server password
										
    -v, --verbose                       Mode verbose
    -d, --debug                         Mode debug
";

// Variables - inputs
$modeVerbose = false;
$modeDebug = false;

$triplestore = "standard";
$endpointQueryAndUpdate = "";
$endpointQueryOnly = "";
$endpointUpdateOnly = "";
$nameParameterQuery = "query";
$nameParameterUpdate = "update";
$endpointLogin = "";
$endpointPassword = "";


$TTRIPLESTORE = "standard";
$tendpointQueryAndUpdate = "";
$tendpointQueryOnly = "";
$tendpointUpdateOnly = "";
$tnameParameterQuery = "query";
$tnameParameterUpdate = "update";
$tendpointLogin = "";
$tendpointPassword = "";
// Variables
$listFileTTL = null;

//https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project
$GRAPH_RESULTS_EARL = "";//'http://dev.grid-observatory.org/sparql11-test-results/';
$OUTPUT_FOLDER_RESULTS_JUNIT = "";//getcwd();

$SOFTWARE_NAME_EARL ="Unknown";
$SOFTWARE_DESCRIBE_EARL="";
$SOFTWARE_DESCRIBE_TAG_EARL="v0.0";

$TFT_NAME_EARL ="TFT";
$TFT_DESCRIBE_EARL="";
$TFT_DESCRIBE_TAG_EARL="v1.0";

$DATETEST = date("c", time());

//Constant
$FOLDERTESTS = '';
$GRAPHTESTS = '';
$TAGTESTS = '';



if(count($argv) < 2){
	echo $usage;
	exit();
}

for($i = 1; $i < count($argv); $i++)  {
	$param=explode("=",$argv[$i]);

	switch($param[0]){
		case "-h":
		case "--help":
			echo $usage;
			exit();
		case "-v":
		case "--verbose":
			$modeVerbose = true;
			break;
		case "-d":
		case "--debug":
			$modeDebug = true;
			break;
		case "--list":
			echo "List of servers available that you can test with this script :\n";
			foreach ($listTriplestore as $ts) {
				echo $ts."\n";
			}
			exit();
		case "-o":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -o (see --help)\n";
				exit();
			}
			$OUTPUT_FOLDER_RESULTS_JUNIT = $argv[$i + 1];
			if(file_exists($OUTPUT_FOLDER_RESULTS_JUNIT) === FALSE){
				if(! mkdir($OUTPUT_FOLDER_RESULTS_JUNIT,0777, $recursive = true)){
					echo "ERROR : The output didn't find\n";
					exit();
				}
			}
			$i++;
			break;
		case "--output":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --output (see --help)\n";
				exit();
			}
			$OUTPUT_FOLDER_RESULTS_JUNIT = $param[1];
			if(file_exists($OUTPUT_FOLDER_RESULTS_JUNIT) === FALSE){
				if(! mkdir($OUTPUT_FOLDER_RESULTS_JUNIT,0777, $recursive = true)){
					echo "ERROR : The output didn't find\n";
					exit();
				}
			}
			break;
		case "-r":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -r (see --help)\n";
				exit();
			}
			$GRAPH_RESULTS_EARL = $argv[$i + 1];
			if( parse_url($GRAPH_RESULTS_EARL) === FALSE){
				echo "ERROR : The name of graph has to be a URL.\n";
				exit();
			}
			$i++;
			break;
		case "--recordResult":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --recordResult (see --help)\n";
				exit();
			}
			$GRAPH_RESULTS_EARL = $param[1];
			if( parse_url($GRAPH_RESULTS_EARL) === FALSE){
				echo "ERROR : The name of graph has to be a URL.\n";
				exit();
			}
			break;

			/*
--softwareName=NAME                      Save name in the results EARL.
--softwareDescribeTag=TAG           Save last tag in the results EARL.
--softwareDescribe=DESCRIBE
			*/
		case "--softwareName":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --softwareName (see --help)\n";
				exit();
			}
			$SOFTWARE_NAME_EARL = $param[1];
			break;
		case "--softwareDescribeTag":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --output (see --help)\n";
				exit();
			}
			$SOFTWARE_DESCRIBE_TAG_EARL = $param[1];
			break;
		case "--softwareDescribe":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --output (see --help)\n";
				exit();
			}
			$SOFTWARE_DESCRIBE_EARL = $param[1];
			break;
		case "-i":
		case "--init":
			$init = true;
			break;
//////////////////////////////////////////////////////////////////////////////////
		case "-t":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -t (see --help)\n";
				exit();
			}
			$triplestore = $argv[$i + 1];
			if(! in_array($triplestore, $listTriplestore)){
				echo "ERROR : This triplestore is not available\n";
				exit();
			}
			$i++;
			break;
		case "--triplestore":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --triplestore (see --help)\n";
				exit();
			}
			$triplestore = $param[1];
			if(! in_array($triplestore, $listTriplestore)){
				echo "ERROR : This triplestore is not available\n";
				exit();
			}
			break;
		case "-l":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -l (see --help)\n";
				exit();
			}
			$endpointLogin = $argv[$i + 1];
			$i++;
			break;
		case "--login":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --login (see --help)\n";
				exit();
			}
			$endpointLogin = $param[1];
			break;
		case "-p":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -p (see --help)\n";
				exit();
			}
			$endpointPassword = $argv[$i + 1];
			$i++;
			break;
		case "--password":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --password (see --help)\n";
				exit();
			}
			$endpointPassword = $param[1];
			break;
		case "-e":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -e (see --help)\n";
				exit();
			}
			$endpointQueryAndUpdate = $argv[$i + 1];
			if(! filter_var($endpointQueryAndUpdate, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--endpointQueryAndUpdate":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --endpointQueryAndUpdate (see --help)\n";
				exit();
			}
			$endpointQueryAndUpdate = $param[1];
			if(! filter_var($endpointQueryAndUpdate, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "-q":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -q (see --help)\n";
				exit();
			}
			$endpointQueryOnly = $argv[$i + 1];
			if(! filter_var($endpointQueryOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--endpointQueryOnly":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --endpointQueryOnly (see --help)\n";
				exit();
			}
			$endpointQueryOnly = $param[1];
			if(! filter_var($endpointQueryOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "-u":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -u (see --help)\n";
				exit();
			}
			$endpointUpdateOnly = $argv[$i + 1];
			if(! filter_var($endpointUpdateOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--endpointUpdateOnly":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --endpointUpdateOnly (see --help)\n";
				exit();
			}
			$endpointUpdateOnly = $param[1];
			if(! filter_var($endpointUpdateOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "--nameParameterQuery":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --nameParameterQuery (see --help)\n";
				exit();
			}
			$nameParameterQuery  = $param[1];
			break;
		case "--nameParameterUpdate":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --nameParameterUpdate (see --help)\n";
				exit();
			}
			$nameParameterUpdate  = $param[1];
			break;
////////////////////////////////////////////////////////
		case "-tt":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -tt (see --help)\n";
				exit();
			}
			$TTRIPLESTORE = $argv[$i + 1];
			if(! in_array($TTRIPLESTORE, $listTriplestore)){
				echo "ERROR : This triplestore is not available\n";
				exit();
			}
			$i++;
			break;
		case "--testtriplestore":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --testtriplestore (see --help)\n";
				exit();
			}
			$TTRIPLESTORE = $param[1];
			if(! in_array($TTRIPLESTORE, $listTriplestore)){
				echo "ERROR : This triplestore is not available\n";
				exit();
			}
			break;
		case "-te":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -te (see --help)\n";
				exit();
			}
			$tendpointQueryAndUpdate = $argv[$i + 1];
			if(! filter_var($tendpointQueryAndUpdate, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--testendpointQueryAndUpdate":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --testendpointQueryAndUpdate (see --help)\n";
				exit();
			}
			$tendpointQueryAndUpdate = $param[1];
			if(! filter_var($tendpointQueryAndUpdate, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "-tq":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -tq (see --help)\n";
				exit();
			}
			$tendpointQueryOnly = $argv[$i + 1];
			if(! filter_var($tendpointQueryOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--testendpointQueryOnly":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --tendpointQueryOnly (see --help)\n";
				exit();
			}
			$testendpointQueryOnly = $param[1];
			if(! filter_var($tendpointQueryOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "-tu":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -tu (see --help)\n";
				exit();
			}
			$tendpointUpdateOnly = $argv[$i + 1];
			if(! filter_var($tendpointUpdateOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			$i++;
			break;
		case "--testendpointUpdateOnly":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --testendpointUpdateOnly (see --help)\n";
				exit();
			}
			$tendpointUpdateOnly = $param[1];
			if(! filter_var($tendpointUpdateOnly, FILTER_VALIDATE_URL)){
				echo "ERROR : The URL of endpoint is not valid\n";
				exit();
			}
			break;
		case "--testnameParameterQuery":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --nameParameterQuery (see --help)\n";
				exit();
			}
			$tnameParameterQuery  = $param[1];
			break;
		case "--testnameParameterUpdate":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --nameParameterUpdate (see --help)\n";
				exit();
			}
			$tnameParameterUpdate  = $param[1];
			break;

		case "-tl":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -tl (see --help)\n";
				exit();
			}
			$tendpointLogin = $argv[$i + 1];
			$i++;
			break;
		case "--testlogin":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --testlogin (see --help)\n";
				exit();
			}
			$tendpointLogin = $param[1];
			break;
		case "-tp":
			if(! array_key_exists($i + 1, $argv)){
				echo "ERROR : forget parameter after -tp (see --help)\n";
				exit();
			}
			$tendpointPassword = $argv[$i + 1];
			$i++;
			break;
		case "--testpassword":
			if(! array_key_exists(1, $param)){
				echo "ERROR : forget parameter after --testpassword (see --help)\n";
				exit();
			}
			$tendpointPassword = $param[1];
			break;
////////////////////////////////////////////////////////
		default:
			//echo $usage; exit();
			echo "ERROR usage ! (".$param[0]."?)";
			echo $usage; exit();
	}
}

if($modeVerbose){
	echo "VERSION : ".$TFT_DESCRIBE_TAG_EARL."\n";
}

if($modeDebug){
	ini_set('display_errors','On');
}else{
    ini_set('error_log','/dev/null');
	ini_set('display_errors','Off');
}

//Client web
$CURL = new Curl($modeDebug);
/////////////// INIT ENDPOINT
$readonly = false;

$ENDPOINT = null;
if ($endpointQueryOnly == "" && $endpointUpdateOnly == "" && $endpointQueryAndUpdate == "") {
    echo "ERROR : The endpoint didn't find\n";
    exit();
} elseif ($endpointQueryAndUpdate != "") {
    $ENDPOINT = new SparqlClient($modeDebug);
    $ENDPOINT->setEndpointRead($endpointQueryAndUpdate);
    $ENDPOINT->setEndpointWrite($endpointQueryAndUpdate);
} elseif ($endpointQueryOnly == "" || $endpointUpdateOnly == "") {
    echo "ERROR : The endpoint SPARQL query or update didn't find\n";
    exit();
} else {
    $ENDPOINT = new SparqlClient($modeDebug);
    $ENDPOINT->setEndpointRead($endpointQueryOnly);
    $ENDPOINT->setEndpointWrite($endpointUpdateOnly);
    $ENDPOINT->setNameParameterQueryRead($nameParameterQuery);
    $ENDPOINT->setNameParameterQueryWrite($nameParameterUpdate);
}
if ($endpointLogin != "" && $endpointPassword != "") {
    $ENDPOINT->setLogin($endpointLogin);
    $ENDPOINT->setPassword($endpointPassword);
}



$TESTENDPOINT = null;
$TESTENDPOINT_HOSTNAME = null;
$TESTENDPOINT_PORT = null;
$TESTENDPOINT_PATH = null;
if($tendpointQueryOnly == "" && $tendpointUpdateOnly == "" && $tendpointQueryAndUpdate == ""){
	echo "ERROR : The endpoint didn't find\n"; exit();
}elseif($tendpointQueryAndUpdate != ""){
	$TESTENDPOINT = new SparqlClient($modeDebug);
    $TESTENDPOINT->setEndpointRead($tendpointQueryAndUpdate);
    $TESTENDPOINT->setEndpointWrite($tendpointQueryAndUpdate);

    $TESTENDPOINT_HOSTNAME = parse_url($tendpointQueryAndUpdate, PHP_URL_HOST);
    $TESTENDPOINT_PORT = parse_url($tendpointQueryAndUpdate, PHP_URL_PORT);
    $path = parse_url($tendpointQueryAndUpdate, PHP_URL_PATH);
    $lastpos = strrpos($path, "/");
    $TESTENDPOINT_PATH = substr($path,0,$lastpos+1);
}elseif($tendpointQueryOnly == "" || $tendpointUpdateOnly == ""){
	echo "ERROR : The endpoint SPARQL query or update didn't find\n"; exit();
}else{
	$TESTENDPOINT = new SparqlClient($modeDebug);
	$TESTENDPOINT->setEndpointRead($tendpointQueryOnly);
	$TESTENDPOINT->setEndpointWrite($tendpointUpdateOnly);
	$TESTENDPOINT->setNameParameterQueryRead($tnameParameterQuery);
	$TESTENDPOINT->setNameParameterQueryWrite($tnameParameterUpdate);

    $TESTENDPOINT_HOSTNAME = parse_url($endpointQueryOnly, PHP_URL_HOST);
    $TESTENDPOINT_PORT = parse_url($endpointQueryOnly, PHP_URL_PORT);
    $path = parse_url($endpointQueryOnly, PHP_URL_PATH);
    $lastpos = strrpos($path, "/");
    $TESTENDPOINT_PATH = substr($path,0,$lastpos+1);
}

if(empty($TESTENDPOINT_PORT)){
    $TESTENDPOINT_PORT = "80";
}

if($tendpointLogin != "" && $tendpointPassword != ""){
	$TESTENDPOINT->setLogin($tendpointLogin);
	$TESTENDPOINT->setPassword($tendpointPassword);
}
///////// PRINT CONFIG

echo "
Configuration about tests :
- Graph of output EARL : ".$GRAPH_RESULTS_EARL."
- Output of tests      : ".$OUTPUT_FOLDER_RESULTS_JUNIT."
- Endpoint type        : ".$triplestore."
- Endpoint query       : ".$ENDPOINT->getEndpointRead()."
- Endpoint update      : ".$ENDPOINT->getEndpointWrite()."
- TEST : Endpoint type        : ".$TTRIPLESTORE."
- TEST : Endpoint query       : ".$TESTENDPOINT->getEndpointRead()."
- TEST : Endpoint update      : ".$TESTENDPOINT->getEndpointWrite()."
- Mode verbose         : ".($modeVerbose?"ON":"OFF")."
- Mode debug           : ".($modeDebug?"ON":"OFF")."
";
/*
- Endpoint login       : ".$ENDPOINT->getLogin()."
- Endpoint password      : ".$ENDPOINT->getPassword()."
*/

foreach($listTestSuite as $URL => $folder){
	echo "==================================================================\n";
	echo "TEST : ".$URL."\n";
	$FOLDERTESTS = $folder;
	$GRAPHTESTS = $URL ;
	$TAGTESTS =  str_replace("/", "", $folder);;
	//////////////////////////// TESTS

	ProtocolTest::doAllTests();

	// TODO ?
	//ServiceDescriptionTest::doAllTests();

	PositiveSyntaxTest::doAllTests();

	NegativeSyntaxTest::doAllTests();

	QueryEvaluationTest::doAllTests();

	CSVResultFormatTest::doAllTests();

	UpdateEvaluationTest::doAllTests(); //ok test multi graph

	PositiveUpdateSyntaxTest::doAllTests();

	NegativeUpdateSyntaxTest::doAllTests();

	echo "\n END TESTS \n";
}

